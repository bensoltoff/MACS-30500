---
title: "Publishing reproducible documents with Quarto"
author: "INFO 5940 <br /> Cornell University"
format: 
  revealjs:
    slide-number: c/t
    width: 1600
    height: 900
    css: ["theme/theme.css"]
    theme: simple
    echo: true
---

```{r pkgs, include = FALSE, cache = FALSE}
library(tidyverse)
library(rcis)
library(here)
library(ymlthis)
library(countdown)
library(palmerpenguins)

set.seed(1234)
theme_set(theme_minimal(base_size = rcis::base_size))
```

## Quarto presentation formats

- `revealjs` - open-source HTML presentation format
- `beamer` for LaTex slides
- Powerpoint for when you *have* to collaborate via Office

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#447099",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

## `revealjs`

> reveal.js is an open source HTML presentation framework. It's a tool that enables anyone with a web browser to create fully-featured and beautiful presentations for free.

. . .

-   `revealjs` for Quarto is a framework for turning Pandoc-friendly markdown + code into beautiful slides

-   User guide: <https://quarto.org/docs/presentations/revealjs/>

## Core workflow

    ---
    format: revealjs
    ---

    ## Step 1
    - Split slides up with level 2 headers: `## Heading 2`
    - Add some markdown + text and/or some R/Python code

    ## Step 2
    - quarto render

    ## Step 3
    - Profit
    
# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099"}

- Download `usethis::use_course("cis-ds/reproducible-docs")`
- Open `revealjs-penguins.qmd`
- Explore the code
- Add a new slide with a level 2 header and some text
- Render it!

## YAML for these slides

    ---
    format: 
      revealjs:
        slide-number: c/t
        width: 1600
        height: 900
        css: ["theme/theme.css"]
        theme: simple
        echo: true
    ---

## Transitions

+-------------+------------------------------------------------------------------------+
| Transition  | Description                                                            |
+=============+========================================================================+
| `none`      | No transition (switch instantly)                                       |
+-------------+------------------------------------------------------------------------+
| `fade`      | Cross fade                                                             |
+-------------+------------------------------------------------------------------------+
| `slide`     | Slide horizontally                                                     |
+-------------+------------------------------------------------------------------------+
| `convex`    | Slide at a convex angle                                                |
+-------------+------------------------------------------------------------------------+
| `concave`   | Slide at a concave angle                                               |
+-------------+------------------------------------------------------------------------+
| `zoom`      | Scale the incoming slide so it grows in from the center of the screen. |
+-------------+------------------------------------------------------------------------+

. . .

``` yaml
---
title: "Presentation"
format:
  revealjs:
    transition: slide
    transition-speed: fast
---
```

## Sizing

+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `width`  | The "normal" width of the presentation, aspect ratio will be preserved when the presentation is scaled to fit different resolutions. Can be specified using percentage units.  |
+:=========+:===============================================================================================================================================================================+
| `height` | The "normal" height of the presentation, aspect ratio will be preserved when the presentation is scaled to fit different resolutions. Can be specified using percentage units. |
+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

``` yaml
format:
  revealjs:
    height: 900
    width: 1600
```

## Slide numbering

+----------------+-------------------------------------------------------------------------+
| `slide-number` | Display the page number of the current slide                            |
|                |                                                                         |
|                | -   `true`: Show slide number                                           |
|                |                                                                         |
|                | -   `false`: Hide slide number                                          |
|                |                                                                         |
|                | Can optionally be set as a string that specifies the number formatting: |
|                |                                                                         |
|                | -   `h.v`: Horizontal . vertical slide number                           |
|                |                                                                         |
|                | -   `h/v`: Horizontal / vertical slide number                           |
|                |                                                                         |
|                | -   `c`: Flattened slide number                                         |
|                |                                                                         |
|                | -   `c/t`: Flattened slide number / total slides (default)              |
+----------------+-------------------------------------------------------------------------+

. . .

``` yaml
---
format:
  revealjs:
    slide-number: c/t #< collapsed/total
---
```

## Presentation preview

-   In the latest version of RStudio, Quarto `revealjs` presentations will open up as a "background job" in the Presentation tab.

. . .

![](images/presentation-tab.png){height="800px"}

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099"}

-   Using RStudio, create a new `revealjs` Quarto presentation
-   Change YAML:
    -   author for your name
    -   titled "My first Quarto Presentation!"
    -   Add slide numbering (what do the different types mean?)
-   Write out what you did this morning (woke up, ate breakfast, walked to this room, etc) in sub-sections
-   New sections should have level 2 headers
-   Add a code chunk
-   Link out to an image with markdown syntax
-   Render it!

## Separate slides

-   Level 2 header = new slide

-   Level 1 header = new slide and new section

. . .

-   `---` can also delineate slides via horizontal rules or leave the heading "blank" for untitled slides

## Reminder about pandoc div and spans

    ::: {.class}
    <SOME CONTENT>
    :::

. . .

    Some text with a specific [span]{.span-class}

## Lists

-   Create lists with `-` or `*` or `1.`

. . .

Incrementally reveal elements with:

    ::: {.incremental}

    - First item
    - Second item

    :::

. . .

Or affect globally:

``` yaml
format:
  revealjs:
    incremental: true
```

. . .

Or turn it off for specific lists

    ::: {.nonincremental}

    - 1st Item
    - 2nd Item

    :::
    
## Incremental lists

::: {.incremental}

- First item
- Second item
- Last item

:::

## Incremental reveal

Not limited to just bullet points...

Use `. . .` syntax to indicate a break at an arbitrary location

. . .

```{r}
head(penguins)
```

## Incremental reveal

    Not limited to just bullet points...

    Use `. . .` syntax to indicate a break at an arbitrary location

    . . .

    ```{{r}}
    head(penguins)
    ```


## Column layout

    :::: {.columns}

    ::: {.column width="40%"}
    contents...
    :::

    ::: {.column width="60%"}
    contents...
    :::

    ::::

## Column layout

::: columns
::: {.column width="40%"}
On the left
:::

::: {.column width="60%"}
On the right
:::
:::

## Column layout

::: columns
::: {.column width="40%"}
```{r}
#| echo: fenced
#| eval: false
dplyr::glimpse(penguins)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| eval: true
dplyr::glimpse(penguins)
```
:::
:::

## Output location, `column-fragment`

```{r}
#| echo: fenced
#| output-location: column-fragment
#| code-line-numbers: "|2"

library(ggplot2)

penguins %>% 
  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y~x")
```

## Output location, `column`

```{r}
#| echo: fenced
#| output-location: column
#| code-line-numbers: "|2"

library(ggplot2)

penguins %>% 
  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y~x")
```

## Output location, `fragment`

```{r}
#| echo: fenced
#| output-location: fragment
#| code-line-numbers: "|2"

library(ggplot2)

penguins %>% 
  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y~x")
```

## Output location, `slide`

```{r}
#| echo: fenced
#| output-location: slide
#| code-line-numbers: "|2"

library(ggplot2)

penguins %>% 
  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y~x")
```

## Images

::: columns
::: {.column width="50%"}
    ![](images/boston-sleep.png){fig-align="center"}

![](images/boston-sleep.png){fig-align="center"}
:::

::: {.column width="50%"}
    ![](images/boston-sleep.png)

![](images/boston-sleep.png)
:::
:::

## Images


```markdown
::: columns
::: {.column width="50%"}
    ![](images/boston-sleep.png){fig-align="center"}

![](images/boston-sleep.png){fig-align="center"}
:::

::: {.column width="50%"}
    ![](images/boston-sleep.png)

![](images/boston-sleep.png)
:::
:::
```

## Stack layout

Incremental reveal of images/content

::: r-stack
![](images/howard-table.png){.fragment width="450"}

![](images/boston-sleep.png){.fragment width="400"}

![](images/boston-terrier.png){.fragment width="300"}
:::

## Title Slide, YAML edition

``` yaml
---
format: revealjs
title: Hello Quarto
subtitle: Slides with revealjs
author: <a href="https://bensoltoff.com">Benjamin Soltoff</a>
date: 2022-10-04
institute: Cornell University
---
```

## Tabsets

    ::: {.panel-tabset}

    ## Element 1

    ## Element 2

    :::

## Tabsets

::: panel-tabset
## Code

```{r}
#| echo: fenced
#| eval: false
head(penguins)
```

## Output

```{r}
#| eval: true
#| echo: false
head(penguins)
```

# Code {background-image="https://data.nssmag.com/images/galleries/18043/code-matrix.jpg" background-size="cover" background-color="black"}

## Code line-highlighting

Use `#| code-line-numbers: "3"` syntax - will highlight line and fade other lines

```{r}
#| echo: fenced
#| output-location: column
#| code-line-numbers: "3"

library(ggplot2)

penguins %>% 
  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y~x")
```

## Code line-highlighting

Sometimes you want to make a point though...

```{r}
#| echo: fenced
#| output-location: column
#| code-line-numbers: "|3"

library(ggplot2)

penguins %>% 
  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y~x")
```

## Code line-highlighting

And I often want to "walk through" a set of code!

```{r}
#| echo: fenced
#| output-location: column
#| code-line-numbers: "|3|5|8|10"

library(ggplot2)

penguins %>% 
  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y~x")
```

## Themes/Appearance

<https://quarto.org/docs/presentations/revealjs/themes.html>

. . .

```yaml
---
title: "Presentation"
format:
  revealjs: 
    theme: serif
---
```

. . .

```yaml
---
title: "Presentation"
format:
  revealjs: 
    theme: dark
---
```

. . .

```yaml
---
title: "Presentation"
format:
  revealjs: 
    theme: [default, custom.scss]
---
```

